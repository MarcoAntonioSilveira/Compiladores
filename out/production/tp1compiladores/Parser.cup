import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import symbTable.*;
import tipo.*;

parser code {:
    public static int errors = 0;
    public static StringBuffer code = new StringBuffer();

    public void report_error(String message, Object info)  {
        System.out.println(message);
        errors++;
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println(message);
        System.exit(-1);
    }

    public void semantic_error(String lexeme, String message) {
        errors ++;
        //System.err.println("Error in line "+ Main.lexicalAnalyzer.current_line() + " : Semantic error");
        //System.err.println("==> " + message + ": "+ lexeme + "\n");
    }

    public void semantic_error(String message) {
        errors ++;
        //System.err.println("Error "+ Main.lexicalAnalyzer.current_lexeme() + " : Semantic error");
        //System.err.println("==> " + message +"\n");
    }
:};

action code {:

	class Exp {
	  public Tipo tipo;
	  public String code;
	  public boolean isConstant;

	  Exp(Tipo t, String code) {
		this(t, code, false);
	  }

	  Exp(Tipo t, String code, boolean cte) {
		tipo = t;
		this.code = code;
		isConstant = cte;
	  }

	}

	class Reg {


		public String id;
		public String val;

		Reg(String id) {
			this(id,"");
		}

		Reg(String id, String val) {
			this.id = id;
			this.val = val;
		}

	}

	public String assembOp(String pascOper) {
		if(pascOper.equals("-")) {
			return "SUB";
		}
		else if(pascOper.equals("+")) {
			return "ADD";
		}
		else if(pascOper.equals("*")) {
			return "MUL";
		}
		else if(pascOper.equals("/") || pascOper.toString().toLowerCase().equals("div")) {
			return "DIV";
		}
		return "";
	}

	/* listas auxiliares para gerenciar registradores */
	List<Reg> argRegs = new ArrayList<Reg> ();

	/* pesquisa um registrador argumento dado seu valor */
	public Reg getArgReg(String val) {
		for(Reg reg : argRegs) {
			if(reg.val.equals(val))
				return reg;
		}
		return null;
	}

	/* lista para gerenciar destino de laços (labels) */
	List<Integer> labels = new ArrayList<Integer>();

	/* variavel auxiliar para manipulacao de labels */
	int label = 0;

:};

init with {:
    TabelaDeSimbolos.inicializa();
    Tipo.criaTipos();
:};

terminal IF, THEN, ELSE, DO, WHILE, UNTIL, READ, WRITE, FALSE, TRUE;
terminal INTEGER_CONST, REAL_CONST, CHAR_CONST, NOT;
terminal String IDENTIFIER, ADDOP, MULOP;
terminal PROGRAM, INTEGER, REAL, BOOLEAN, CHAR, BEGIN, END, LEFT_PAR, RIGHT_PAR;
terminal RELOP, ASSIGN, SEMI, COLON, COMMA, MINUS;

non terminal  program, decl_list, decl, compound_stmt, stmt_list;
non terminal  stmt, assign_stmt, if_stmt, loop_stmt;
non terminal  read_stmt, write_stmt, expr_list;
non terminal  Exp identifier, factor, factor_a, constant, boolean_constant, expr;
non terminal  Exp cond, simple_expr, term;
non terminal  Tipo type;
non terminal  String id;
non terminal  List<String> ident_list, stmt_prefix, stmt_suffix;


start with program;


program ::= PROGRAM id:x SEMI decl_list compound_stmt {:
    parser.code.append("\t HLT \n\n");
:};

decl_list ::= decl_list SEMI decl | decl ;

decl ::= ident_list:il COLON type:tp {:
    for(String id: il) {
        if(! TabelaDeSimbolos.inserirVariavel(id.toString().toLowerCase(), new Simbolo(id, tp))) {
            parser.semantic_error(id, "variável já existente");
        }
    }
:};

ident_list ::= ident_list:il COMMA id:id {:
    il.add(id.toString().toLowerCase());
    RESULT = il;
:} | id:id {:
    List<String> il = new ArrayList<String>();
    il.add(id.toLowerCase());
    RESULT = il;
:};

type ::= INTEGER {: RESULT = Tipo.getTipo(Tipo.INTEGER); :}
        | REAL {: RESULT = Tipo.getTipo(Tipo.REAL); :}
        | BOOLEAN {: RESULT = Tipo.getTipo(Tipo.BOOLEAN); :}
        | CHAR {: RESULT = Tipo.getTipo(Tipo.CHAR); :} ;

compound_stmt ::= BEGIN stmt_list END;

stmt_list ::= stmt_list SEMI stmt | stmt ;

stmt ::= assign_stmt | if_stmt | loop_stmt | read_stmt | write_stmt | compound_stmt ;

assign_stmt ::= identifier:id ASSIGN expr:exp {:
    if(! id.tipo.getVal().equals(exp.tipo.getVal())) {
        if(! exp.tipo.getVal().equals("error") && ! id.tipo.getVal().equals("error")) {
       	    if(! (id.tipo.getVal().equals("real") && exp.tipo.getVal().equals("integer"))) {
       		    parser.semantic_error(id.tipo.getVal(), "Não é possível converter "+ exp.tipo.getVal() + " para ");
       		    RESULT = Tipo.getTipo(Tipo.ERRO);
       		}
       		else {
    		    parser.code.append("\t ST "+exp.code +" , "+id.code+"\n");
       			RESULT = Tipo.getTipo(Tipo.TIPO_VOID);
            }
        }
    }
    else {
        parser.code.append("\t ST "+exp.code +" , "+id.code+"\n");
       	RESULT = Tipo.getTipo(Tipo.TIPO_VOID);
    }
:};

if_stmt ::= IF cond THEN stmt | IF cond THEN stmt ELSE stmt ;

cond ::= expr:exp {:
    if(exp != null) {
        if(! exp.tipo.getVal().equals("boolean")) {
            if(! exp.tipo.getVal().equals("error"))
                parser.semantic_error(exp.tipo.getVal(), "não foi possível converter para boolean");
            RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
        }
        else {
            RESULT = new Exp(exp.tipo, exp.code);
        }
    }
:} ;

loop_stmt ::= stmt_prefix:sp DO stmt_list stmt_suffix:ss {:
     parser.code.append("\t BR "+sp.get(0)+"\n");
     parser.code.append(ss.get(0)+":\n");
:};

stmt_prefix ::= WHILE cond:cond {:
    String lbl1 = "", lblFalse = "";

    labels.add(labels.size()+1);
    lbl1 = "$L"+labels.size();

    parser.code.append(lbl1+":\n");
    parser.code.append("\t LD "+cond.code+" , R0\n");
    parser.code.append("\t SUB R0, 1, R0\n");

    labels.add(labels.size()+1);
    lblFalse = "$L"+labels.size();

    parser.code.append("\t BLTZ R0, "+lblFalse+"\n");

    List<String> whileArgs = new ArrayList <String> ();
    whileArgs.add(lbl1);
    whileArgs.add(lblFalse);

    RESULT = whileArgs;
:} |  ;

stmt_suffix ::= UNTIL cond:cond {:
    String lbl1 = "", lblFalse = "";

    labels.add(labels.size()+1);
    lbl1 = "$L"+labels.size();

    parser.code.append(lbl1+":\n");
    parser.code.append("\t LD "+cond.code+" , R0\n");
    parser.code.append("\t SUB R0 , 1, R0 \n");

    labels.add(labels.size()+1);
    lblFalse = "$L"+labels.size();

    parser.code.append("\t BLTZ R0 , "+lblFalse+"\n");

    List<String> whileArgs = new ArrayList <String> ();
    whileArgs.add(lbl1);
    whileArgs.add(lblFalse);

    RESULT = whileArgs;
:} | END ;

read_stmt ::= READ LEFT_PAR ident_list RIGHT_PAR ;

write_stmt ::= WRITE  LEFT_PAR expr_list RIGHT_PAR ;

expr_list ::= expr | expr_list COMMA expr ;

expr ::= simple_expr:smp_exp {:
    RESULT = new Exp(smp_exp.tipo, smp_exp.code);
:} | simple_expr RELOP simple_expr {:
    RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), "");
:};

simple_expr ::= term:te {:
    RESULT = new Exp(te.tipo, te.code, te.isConstant);
:}  | simple_expr:smp_exp ADDOP:ad term:te {:
    if(ad != null) {
        if(ad.toString().toLowerCase().equals("or")) {
            if(!(smp_exp.tipo.getVal().equals("boolean") && te.tipo.getVal().equals("boolean"))) {
                parser.semantic_error(smp_exp.tipo.getVal() + ", " + te.tipo.getVal(), "The operator OR is undefined for the argument types ");
                RESULT = new Exp(Tipo.getTipo(Tipo.ERRO),"");
            }
            else {
                if(! "R1".equals(smp_exp.code))
                    parser.code.append("\t LD "+smp_exp.code+" , R1\n");
                smp_exp.code = "R1";
                parser.code.append("\t OR "+smp_exp.code+" , "+te.code+" , "+smp_exp.code+" \n");
                RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), smp_exp.code);
            }
        }
        else if(ad.toString().toLowerCase().equals("-") || ad.toString().toLowerCase().equals("+")) {
            if((smp_exp.tipo.getVal().equals("integer") || smp_exp.tipo.getVal().equals("real")) &&
              (te.tipo.getVal().equals("integer") || te.tipo.getVal().equals("real"))) {

                String op = assembOp(ad.toString().toLowerCase());
                if(smp_exp.isConstant) {
                    parser.code.append("\t "+op+" "+smp_exp.code+" , "+te.code+" , R1\n");
                    smp_exp.code = "R1";
                }
                else {
                    parser.code.append("\t "+op+" "+smp_exp.code+" , "+te.code+" , "+smp_exp.code+" \n");
                }
                RESULT = new Exp(Tipo.maximo(smp_exp.tipo, te.tipo), smp_exp.code);
            }
            else if((smp_exp.tipo.getVal().equals("char") || smp_exp.tipo.getVal().equals("string")) &&
              (te.tipo.getVal().equals("char") || te.tipo.getVal().equals("string"))) {
                RESULT = new Exp(Tipo.maximo(smp_exp.tipo, te.tipo), "?");
            }
            else {
                parser.semantic_error(smp_exp.tipo.getVal() + ", " + te.tipo.getVal(), "O operador "+ad+" não é definido para os tipos dos argumentos ");
                RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
            }
        }
    }
:};

term ::= factor_a:f {:
    RESULT = new Exp(f.tipo, f.code, f.isConstant);
:}  | term:smp_exp MULOP:ad factor_a:f {:
    if(ad != null) {
        if(ad.toString().toLowerCase().equals("and")) {
            if(!(smp_exp.tipo.getVal().equals("boolean") && f.tipo.getVal().equals("boolean"))) {
                parser.semantic_error(smp_exp.tipo.getVal() + ", " + f.tipo.getVal(), "O operador AND não é definido para os tipos do argumento.");
                RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
            }
            else {
            if(! "R1".equals(smp_exp.code))
                parser.code.append("\t LD "+smp_exp.code+" , R1\n");
            smp_exp.code = "R1";
            parser.code.append("\t AND "+smp_exp.code+" , "+f.code+" , "+smp_exp.code+"\n");
                RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), smp_exp.code);
            }
        }
        else if(ad.toString().toLowerCase().equals("*") || ad.toString().toLowerCase().equals("/")) {
            if((smp_exp.tipo.getVal().equals("integer") || smp_exp.tipo.getVal().equals("real")) &&
              (f.tipo.getVal().equals("integer") || f.tipo.getVal().equals("real"))) {
                String op = assembOp(ad.toString().toLowerCase());
                if(smp_exp.isConstant) {
                    parser.code.append("\t "+op+" "+smp_exp.code+" , "+f.code+" , R1\n");
                    smp_exp.code = "R1";
                }
                else {
                    parser.code.append("\t "+op+" "+smp_exp.code+" , "+f.code+" ,  "+smp_exp.code+"\n");
                }
                    RESULT = new Exp(Tipo.maximo(smp_exp.tipo, f.tipo), smp_exp.code);
            }
            else {
                parser.semantic_error(smp_exp.tipo.getVal() + " , " + f.tipo.getVal(), "The operator "+ad+" is undefined for the argument types ");
                RESULT = new Exp(Tipo.getTipo(Tipo.ERRO),"");
            }
        }
        else if(ad.toString().toLowerCase().equals("mod") || ad.toString().toLowerCase().equals("div")) {
            if(smp_exp.tipo.getVal().equals("integer") && f.tipo.getVal().equals("integer")) {
            String op = assembOp(ad.toString().toLowerCase());
            if(smp_exp.isConstant) {
                parser.code.append("\t "+op+" "+smp_exp.code+" , "+f.code+" ,  R1\n");
                smp_exp.code = "R1";
            }
            else {
                parser.code.append("\t "+op+" "+smp_exp.code+" , "+f.code+" , "+smp_exp.code+"\n");
            }
                RESULT = new Exp(Tipo.getTipo(Tipo.INTEGER), smp_exp.code);
            }
            else {
                parser.semantic_error(smp_exp.tipo.getVal() + ", " + f.tipo.getVal(), "The operator "+ad+" is undefined for the argument types ");
                RESULT = new Exp(Tipo.getTipo(Tipo.ERRO),"");
            }
        }
    }
:};

factor_a ::= MINUS factor:f {: RESULT = f ;:} | factor:f {: RESULT = f ;:};

factor ::= identifier:id {:
    parser.code.append("\t LD "+id.code +" , R0\n");
    RESULT = new Exp(id.tipo, "R0");
:}
 | constant:c {: RESULT = new Exp(c.tipo, "#"+c.code, true); :}
 | LEFT_PAR expr:exp RIGHT_PAR {:
    if(getArgReg("temp") == null) {
        parser.code.append("\t LD "+exp.code+" , R2\n");
        argRegs.add(new Reg("R2" , "temp"));
        exp.code = "R2";
    }
    RESULT = exp;
 :}
 | NOT factor:f {:
     if(! f.tipo.getVal().equals("boolean")) {
        if(! f.tipo.getVal().equals("error")) {
            parser.semantic_error(f.tipo.getVal(), "O operador NOT não é definido para este tipo ");
        }
        RESULT = new Exp(Tipo.getTipo(Tipo.ERRO),"");
    }
    else {
        parser.code.append("\t LD "+f.code+" , R0\n");
        parser.code.append("\t NOT R0\n");
        f.code = "R0";
        RESULT = f;
    }
 :} ;

constant ::= INTEGER_CONST:ic {: RESULT = new Exp(Tipo.getTipo(Tipo.INTEGER), ic.toString()); :}
    | REAL_CONST:rc {: RESULT = new Exp(Tipo.getTipo(Tipo.REAL), rc.toString()); :}
    | CHAR_CONST:cc {: RESULT = new Exp(Tipo.getTipo(Tipo.CHAR), cc.toString()); :}
    | boolean_constant ;

boolean_constant ::= FALSE {: RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), "0"); :}
    | TRUE {: RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), "1"); :};

identifier ::= IDENTIFIER:id {:
    Simbolo t = null;
    if((t = TabelaDeSimbolos.get(id.toLowerCase())) == null) {
        parser.semantic_error(id.toString(), "unknow name");
        RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
    } else {
        RESULT = new Exp(t.getTipo(), id.toString());
    }
:};

id ::= IDENTIFIER:x {: RESULT = x; :};