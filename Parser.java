
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\006\005\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\005\000\002\012\006\000" +
    "\002\012\010\000\002\013\003\000\002\014\006\000\002" +
    "\015\004\000\002\015\002\000\002\016\004\000\002\016" +
    "\003\000\002\017\006\000\002\020\006\000\002\021\003" +
    "\000\002\021\005\000\002\022\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\005\000\002\024\003\000\002" +
    "\024\005\000\002\025\004\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\005\000\002\026\004" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\022\005\001\002\000\004\002\132\001" +
    "\002\000\004\021\006\001\002\000\004\037\007\001\002" +
    "\000\004\021\011\001\002\000\006\027\ufffe\037\ufffe\001" +
    "\002\000\010\032\ufffb\040\ufffb\041\ufffb\001\002\000\006" +
    "\040\124\041\121\001\002\000\006\027\015\037\016\001" +
    "\002\000\004\002\000\001\002\000\020\004\031\007\uffe7" +
    "\010\022\012\020\013\032\021\033\027\015\001\002\000" +
    "\004\021\011\001\002\000\006\027\uffff\037\uffff\001\002" +
    "\000\004\031\117\001\002\000\012\006\uffee\011\uffee\030" +
    "\uffee\037\uffee\001\002\000\024\014\055\015\052\016\057" +
    "\017\045\020\060\021\063\031\054\034\053\042\044\001" +
    "\002\000\012\006\ufff2\011\ufff2\030\ufff2\037\ufff2\001\002" +
    "\000\012\006\uffef\011\uffef\030\uffef\037\uffef\001\002\000" +
    "\010\011\ufff4\030\ufff4\037\ufff4\001\002\000\012\006\ufff3" +
    "\011\ufff3\030\ufff3\037\ufff3\001\002\000\012\006\ufff1\011" +
    "\ufff1\030\ufff1\037\ufff1\001\002\000\012\006\ufff0\011\ufff0" +
    "\030\ufff0\037\ufff0\001\002\000\024\014\055\015\052\016" +
    "\057\017\045\020\060\021\063\031\054\034\053\042\044" +
    "\001\002\000\004\031\103\001\002\000\004\035\101\001" +
    "\002\000\006\030\100\037\040\001\002\000\004\007\036" +
    "\001\002\000\020\004\031\007\uffe7\010\022\012\020\013" +
    "\032\021\033\027\015\001\002\000\010\011\043\030\042" +
    "\037\040\001\002\000\020\004\031\007\uffe7\010\022\012" +
    "\020\013\032\021\033\027\015\001\002\000\012\006\uffe9" +
    "\011\uffe9\030\uffe9\037\uffe9\001\002\000\012\006\uffe5\011" +
    "\uffe5\030\uffe5\037\uffe5\001\002\000\024\014\055\015\052" +
    "\016\057\017\045\020\060\021\063\031\054\034\053\042" +
    "\044\001\002\000\022\014\055\015\052\016\057\017\045" +
    "\020\060\021\063\031\054\034\053\001\002\000\030\005" +
    "\uffd3\006\uffd3\007\uffd3\011\uffd3\030\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\036\uffd3\037\uffd3\041\uffd3\001\002\000\030\005" +
    "\uffdc\006\uffdc\007\uffdc\011\uffdc\030\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\036\uffdc\037\uffdc\041\uffdc\001\002\000\030\005" +
    "\uffd1\006\uffd1\007\uffd1\011\uffd1\030\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\036\uffd1\037\uffd1\041\uffd1\001\002\000\026\005" +
    "\uffe0\006\uffe0\007\uffe0\011\uffe0\030\uffe0\032\uffe0\033\072" +
    "\034\073\037\uffe0\041\uffe0\001\002\000\030\005\uffde\006" +
    "\uffde\007\uffde\011\uffde\030\uffde\032\uffde\033\uffde\034\uffde" +
    "\036\070\037\uffde\041\uffde\001\002\000\030\005\uffcf\006" +
    "\uffcf\007\uffcf\011\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\036\uffcf\037\uffcf\041\uffcf\001\002\000\022\014\055\015" +
    "\052\016\057\017\045\020\060\021\063\031\054\034\053" +
    "\001\002\000\024\014\055\015\052\016\057\017\045\020" +
    "\060\021\063\031\054\034\053\042\044\001\002\000\030" +
    "\005\uffd0\006\uffd0\007\uffd0\011\uffd0\030\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\036\uffd0\037\uffd0\041\uffd0\001\002\000\030" +
    "\005\uffd7\006\uffd7\007\uffd7\011\uffd7\030\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\036\uffd7\037\uffd7\041\uffd7\001\002\000\030" +
    "\005\uffd4\006\uffd4\007\uffd4\011\uffd4\030\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\036\uffd4\037\uffd4\041\uffd4\001\002\000\030" +
    "\005\uffd2\006\uffd2\007\uffd2\011\uffd2\030\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\036\uffd2\037\uffd2\041\uffd2\001\002\000\012" +
    "\006\uffe6\011\uffe6\030\uffe6\037\uffe6\001\002\000\030\005" +
    "\uffd9\006\uffd9\007\uffd9\011\uffd9\030\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\037\uffd9\041\uffd9\001\002\000\030\005" +
    "\uffd8\006\uffd8\007\uffd8\011\uffd8\030\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\041\uffd8\001\002\000\016\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\030\uffea\037\uffea\001\002" +
    "\000\004\032\066\001\002\000\030\005\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\037\uffd6\041\uffd6\001\002\000\030\005\uffd5\006\uffd5\007" +
    "\uffd5\011\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\001\002\000\024\014\055\015\052\016" +
    "\057\017\045\020\060\021\063\031\054\034\053\042\044" +
    "\001\002\000\030\005\uffdb\006\uffdb\007\uffdb\011\uffdb\030" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb\041\uffdb" +
    "\001\002\000\024\014\055\015\052\016\057\017\045\020" +
    "\060\021\063\031\054\034\053\042\044\001\002\000\024" +
    "\014\055\015\052\016\057\017\045\020\060\021\063\031" +
    "\054\034\053\042\044\001\002\000\024\005\uffdf\006\uffdf" +
    "\007\uffdf\011\uffdf\030\uffdf\032\uffdf\033\072\037\uffdf\041" +
    "\uffdf\001\002\000\030\005\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\030\uffdd\032\uffdd\033\uffdd\034\uffdd\036\070\037\uffdd\041" +
    "\uffdd\001\002\000\030\005\uffda\006\uffda\007\uffda\011\uffda" +
    "\030\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037\uffda\041" +
    "\uffda\001\002\000\010\011\ufff5\030\ufff5\037\ufff5\001\002" +
    "\000\014\002\ufff6\006\ufff6\011\ufff6\030\ufff6\037\ufff6\001" +
    "\002\000\024\014\055\015\052\016\057\017\045\020\060" +
    "\021\063\031\054\034\053\042\044\001\002\000\012\006" +
    "\uffed\011\uffed\030\uffed\037\uffed\001\002\000\024\014\055" +
    "\015\052\016\057\017\045\020\060\021\063\031\054\034" +
    "\053\042\044\001\002\000\006\032\107\041\106\001\002" +
    "\000\006\032\uffe2\041\uffe2\001\002\000\024\014\055\015" +
    "\052\016\057\017\045\020\060\021\063\031\054\034\053" +
    "\042\044\001\002\000\012\006\uffe3\011\uffe3\030\uffe3\037" +
    "\uffe3\001\002\000\006\032\uffe1\041\uffe1\001\002\000\004" +
    "\005\112\001\002\000\020\004\031\007\uffe7\010\022\012" +
    "\020\013\032\021\033\027\015\001\002\000\012\006\114" +
    "\011\uffec\030\uffec\037\uffec\001\002\000\020\004\031\007" +
    "\uffe7\010\022\012\020\013\032\021\033\027\015\001\002" +
    "\000\012\006\uffeb\011\uffeb\030\uffeb\037\uffeb\001\002\000" +
    "\004\007\uffe8\001\002\000\004\021\011\001\002\000\006" +
    "\032\122\041\121\001\002\000\004\021\123\001\002\000" +
    "\012\006\uffe4\011\uffe4\030\uffe4\037\uffe4\001\002\000\010" +
    "\032\ufffc\040\ufffc\041\ufffc\001\002\000\012\023\125\024" +
    "\126\025\130\026\131\001\002\000\006\027\ufffa\037\ufffa" +
    "\001\002\000\006\027\ufff9\037\ufff9\001\002\000\006\027" +
    "\ufffd\037\ufffd\001\002\000\006\027\ufff8\037\ufff8\001\002" +
    "\000\006\027\ufff7\037\ufff7\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\004\007" +
    "\005\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\013\001\001\000\002\001\001" +
    "\000\024\006\020\007\033\010\024\011\025\012\022\014" +
    "\026\015\034\017\027\020\023\001\001\000\006\004\016" +
    "\005\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\115\022\063\023\047\024\050" +
    "\025\045\026\061\027\055\030\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\110\022" +
    "\063\023\047\024\050\025\045\026\061\027\055\030\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\020\007\036\010\024" +
    "\011\025\012\022\014\026\015\034\017\027\020\023\001" +
    "\001\000\004\016\040\001\001\000\022\006\020\010\076" +
    "\011\025\012\022\014\026\015\034\017\027\020\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\060" +
    "\022\063\023\047\024\050\025\045\026\061\027\055\030" +
    "\046\001\001\000\010\026\075\027\055\030\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\066\027\055\030\046\001\001\000\020\022\064\023" +
    "\047\024\050\025\045\026\061\027\055\030\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\070\026\061\027\055" +
    "\030\046\001\001\000\002\001\001\000\014\024\074\025" +
    "\045\026\061\027\055\030\046\001\001\000\016\023\073" +
    "\024\050\025\045\026\061\027\055\030\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\101\023\047\024" +
    "\050\025\045\026\061\027\055\030\046\001\001\000\002" +
    "\001\001\000\022\021\103\022\104\023\047\024\050\025" +
    "\045\026\061\027\055\030\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\022\107\023\047\024\050\025" +
    "\045\026\061\027\055\030\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\020\010" +
    "\112\011\025\012\022\014\026\015\034\017\027\020\023" +
    "\001\001\000\002\001\001\000\022\006\020\010\114\011" +
    "\025\012\022\014\026\015\034\017\027\020\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info)  {
        System.out.println(message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println(message);
        System.exit(-1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDENTIFIER SEMI decl_list compound_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl_list SEMI decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= ident_list COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ident_list ::= ident_list COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ident_list ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ident_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compound_stmt ::= BEGIN stmt_list END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_list ::= stmt_list SEMI stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= assign_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= loop_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= read_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= write_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= compound_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign_stmt ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= IF cond THEN stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stmt ::= IF cond THEN stmt ELSE stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cond ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // loop_stmt ::= stmt_prefix DO stmt_list stmt_suffix 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt_prefix ::= WHILE cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_prefix",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_prefix ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_prefix",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt_suffix ::= UNTIL cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_suffix",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_suffix ::= END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_suffix",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // read_stmt ::= READ LEFT_PAR ident_list RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write_stmt ::= WRITE LEFT_PAR expr_list RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_list ::= expr_list COMMA expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= simple_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= simple_expr RELOP simple_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_expr ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_expr ::= simple_expr ADDOP term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= factor_a 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= term MULOP factor_a 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor_a ::= MINUS factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_a",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor_a ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_a",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= LEFT_PAR expr RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= RELOP factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constant ::= INTEGER_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constant ::= REAL_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constant ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constant ::= boolean_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_constant ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolean_constant ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_constant",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
